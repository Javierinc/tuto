"use strict";(self.webpackChunklecciones_docker=self.webpackChunklecciones_docker||[]).push([[824],{9291:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>c,contentTitle:()=>d,default:()=>p,frontMatter:()=>i,metadata:()=>r,toc:()=>l});const r=JSON.parse('{"id":"tutorial-docker/ejemplo2","title":"7. Variables de Entorno y Vol\xfamenes","description":"Crear nuestra primera App contenerizada","source":"@site/docs/tutorial-docker/ejemplo2.md","sourceDirName":"tutorial-docker","slug":"/tutorial-docker/ejemplo2","permalink":"/tuto/docs/tutorial-docker/ejemplo2","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/tutorial-docker/ejemplo2.md","tags":[],"version":"current","sidebarPosition":6,"frontMatter":{"sidebar_position":6},"sidebar":"tutorialSidebar","previous":{"title":"6. Contenedor de Excalidraw \u270f\ufe0f","permalink":"/tuto/docs/tutorial-docker/contenedor-excalidraw"},"next":{"title":"8. Docker Compose \ud83d\udc19","permalink":"/tuto/docs/tutorial-docker/docker-compose"}}');var s=a(4848),o=a(8453);const i={sidebar_position:6},d="7. Variables de Entorno y Vol\xfamenes",c={},l=[{value:"<strong>Crear nuestra primera App contenerizada</strong>",id:"crear-nuestra-primera-app-contenerizada",level:2},{value:"<strong>docker-tutorial</strong> \ud83d\uddc2\ufe0f",id:"docker-tutorial-\ufe0f",level:2},{value:"<strong>app1</strong>",id:"app1",level:2},{value:"<strong>app.py</strong>",id:"apppy",level:3},{value:"<strong>requirements.txt</strong>",id:"requirementstxt",level:3},{value:"<strong>Dockerfile</strong>",id:"dockerfile",level:3},{value:"<strong>Vamoh a probarlo</strong>",id:"vamoh-a-probarlo",level:3},{value:"runconainer",id:"runconainer",level:2},{value:"<strong>Qu\xe9 hicimos con este comando</strong>",id:"qu\xe9-hicimos-con-este-comando",level:3},{value:"<strong>Explicaci\xf3n del comando</strong>",id:"explicaci\xf3n-del-comando",level:3},{value:"<strong>1. <code>docker run</code></strong>",id:"1-docker-run",level:4},{value:"<strong>2. <code>-it</code></strong>",id:"2--it",level:4},{value:"<strong>3. <code>--name chuck_norris_generator</code></strong>",id:"3---name-chuck_norris_generator",level:4},{value:"<strong>4. <code>-e API_URL=https://api.chucknorris.io/jokes/random</code></strong>",id:"4--e-api_urlhttpsapichucknorrisiojokesrandom",level:4},{value:"<strong>5. <code>-v ${PWD}/../data:/app/data</code></strong>",id:"5--v-pwddataappdata",level:4},{value:"<strong>6. <code>app1</code></strong>",id:"6-app1",level:4},{value:"<strong>Qu\xe9 logramos</strong>",id:"qu\xe9-logramos",level:3},{value:"<strong>\xbfPor qu\xe9 Importa?</strong>",id:"por-qu\xe9-importa",level:3},{value:"<strong>app2</strong>",id:"app2",level:2},{value:"<strong>app.py</strong>",id:"apppy-1",level:3},{value:"<strong>requirements.txt</strong>",id:"requirementstxt-1",level:3},{value:"<strong>style.css</strong>",id:"stylecss",level:3},{value:"<strong>Dockerfile</strong>",id:"dockerfile-1",level:3},{value:"<strong>Vamoh a probarlo</strong>",id:"vamoh-a-probarlo-1",level:3}];function t(e){const n={br:"br",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",hr:"hr",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"7-variables-de-entorno-y-vol\xfamenes",children:"7. Variables de Entorno y Vol\xfamenes"})}),"\n",(0,s.jsx)(n.h2,{id:"crear-nuestra-primera-app-contenerizada",children:(0,s.jsx)(n.strong,{children:"Crear nuestra primera App contenerizada"})}),"\n",(0,s.jsx)(n.p,{children:"Llego el momento de crear nuestra primera app que corra en un contenedor."}),"\n",(0,s.jsxs)(n.h2,{id:"docker-tutorial-\ufe0f",children:[(0,s.jsx)(n.strong,{children:"docker-tutorial"})," \ud83d\uddc2\ufe0f"]}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["Crea la carpeta ",(0,s.jsx)(n.strong,{children:"docker-tutorial"})]}),"\n",(0,s.jsxs)(n.li,{children:["Ingresa a ",(0,s.jsx)(n.strong,{children:"docker-tutorial"})," y crea en una carpeta que se llame ",(0,s.jsx)(n.strong,{children:"app1"})," y otra llamada ",(0,s.jsx)(n.strong,{children:"data"})]}),"\n",(0,s.jsxs)(n.li,{children:["Abrela ",(0,s.jsx)(n.strong,{children:"docker-tutorial"})," en tu editor de c\xf3digo, yo lo hago en VS Code"]}),"\n",(0,s.jsxs)(n.li,{children:["Una vez en el editor, dentro de ",(0,s.jsx)(n.strong,{children:"app1"})," crea el archivo ",(0,s.jsx)(n.code,{children:"app.py"})]}),"\n",(0,s.jsxs)(n.li,{children:["Crea dentro de app1 un archivo txt llamado ",(0,s.jsx)(n.code,{children:"requirements"})]}),"\n",(0,s.jsxs)(n.li,{children:["Crea dentro de app1 una carpeta archivo llamado ",(0,s.jsx)(n.code,{children:"Dockerfile"})]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Tu carpeta docker-tutorial se debe ver as\xed"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"docker-tutorial/\n\u251c\u2500\u2500 app1/               \n\u2502   \u251c\u2500\u2500 app.py\n\u2502   \u251c\u2500\u2500 requirements.txt\n\u2502   \u251c\u2500\u2500 Dockerfile\n|\u2500\u2500 data/\n"})}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"app1",children:(0,s.jsx)(n.strong,{children:"app1"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Desarrollemos app1"})}),"\n",(0,s.jsx)(n.h3,{id:"apppy",children:(0,s.jsx)(n.strong,{children:"app.py"})}),"\n",(0,s.jsxs)(n.p,{children:["Sigamos, ahora abre en el ",(0,s.jsx)(n.code,{children:"app.py"})," y copia el c\xf3digo que est\xe1 a continuaci\xf3n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"import os\nimport requests\nimport time\n\n# Leer la URL de la API desde la variable de entorno\napi_url = os.getenv('API_URL')\n\n# Ruta al archivo para guardar las bromas\ndata_dir = '/app/data'\ndata_file = os.path.join(data_dir, 'jokes.txt')\n\n# Crear el directorio si no existe\nif not os.path.exists(data_dir):\n    os.makedirs(data_dir)\n\n# Verificar si el archivo existe, si no, lo creamos autom\xe1ticamente\nif not os.path.exists(data_file):\n    open(data_file, 'w').close()  # Esto crea el archivo vac\xedo si no existe\n\n# Funci\xf3n para hacer la solicitud y guardar la broma\ndef fetch_and_save_joke():\n    response = requests.get(api_url)\n    if response.status_code == 200:\n        joke = response.json().get('value', 'No joke found.')\n        print(f\"Broma obtenida: {joke}\")\n\n        # Guardar la broma en el archivo (modo append)\n        with open(data_file, 'a') as file:\n            file.write(joke + '\\n')\n        print(f\"Broma guardada en {data_file}\")\n    else:\n        print(f\"Error al obtener la broma: {response.status_code}\")\n\n# Ejecutar la solicitud cada 1 minuto\nprint(\"Iniciando solicitudes a la API...\")\nwhile True:\n    fetch_and_save_joke()\n    print(\"Esperando 1 minuto para la pr\xf3xima solicitud...\")\n    time.sleep(60)\n"})}),"\n",(0,s.jsxs)(n.p,{children:["El c\xf3digo anterior es sencillo, realiza una ",(0,s.jsx)(n.strong,{children:"petici\xf3n a la API de don Chuck Norris"})," cada un minuto y ",(0,s.jsx)(n.strong,{children:"guarda"})," una de sus memorables ",(0,s.jsx)(n.strong,{children:"frases"})," en un ",(0,s.jsx)(n.strong,{children:"archivo txt"})," que queda en la ",(0,s.jsx)(n.strong,{children:"carpeta data"}),"."]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h3,{id:"requirementstxt",children:(0,s.jsx)(n.strong,{children:"requirements.txt"})}),"\n",(0,s.jsx)(n.p,{children:"Abre el archivo requirements y dentro copia y pega lo siguiente:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"requests\n"})}),"\n",(0,s.jsx)(n.p,{children:"\xa1No olvides guardar!"}),"\n",(0,s.jsx)(n.p,{children:"El requirements.txt contiene las dependencias que se utilizar\xe1n, en este caso requests para hacer las peticiones a la API de don Chuck."}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h3,{id:"dockerfile",children:(0,s.jsx)(n.strong,{children:"Dockerfile"})}),"\n",(0,s.jsx)(n.p,{children:"Ahora abre el archivo ```Dockerfile```` y pega lo que est\xe1 aqu\xed abajo:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-Dockerfile",children:'# Usa la imagen base oficial de Python 3.9 en su versi\xf3n ligera (slim) para minimizar el tama\xf1o de la imagen\nFROM python:3.9-slim\n\n# Crea los directorios necesarios dentro del contenedor: \n# - /app para almacenar el c\xf3digo de la aplicaci\xf3n\n# - /app/data para guardar los datos generados por la aplicaci\xf3n (en este caso, bromas)\nRUN mkdir /app /app/data\n\n# Establece el directorio de trabajo dentro del contenedor como /app\n# Todas las operaciones posteriores se realizar\xe1n desde este directorio\nWORKDIR /app\n\n# Copia el archivo principal del script (app.py) al directorio /app dentro del contenedor\nCOPY app.py /app/\n\n# Copia el archivo de dependencias (requirements.txt) al directorio /app dentro del contenedor\nCOPY requirements.txt /app/\n\n# Instala las dependencias de Python definidas en requirements.txt\nRUN pip install -r requirements.txt\n\n# Define el comando predeterminado que se ejecutar\xe1 cuando el contenedor arranque\nCMD ["python", "app.py"]\n'})}),"\n",(0,s.jsxs)(n.p,{children:["Lee con atenci\xf3n el ",(0,s.jsx)(n.code,{children:"Dockerfile"})," para entender que se hace en cada paso:"]}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"FROM python:3.9-slim"}),":\nEspecifica la imagen base. En este caso, usa una imagen ligera de Python 3.9 para reducir el tama\xf1o del contenedor."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"RUN mkdir /app /app/data"}),":\nCrea los directorios necesarios:\n/app: Contendr\xe1 los archivos de la aplicaci\xf3n.\n/app/data: Usado para almacenar datos generados por la aplicaci\xf3n."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"WORKDIR /app"}),":\nCambia el directorio de trabajo dentro del contenedor a /app. Cualquier comando posterior asumir\xe1 que est\xe1 en este directorio."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"COPY app.py /app/"}),":\nCopia el archivo app.py desde tu m\xe1quina al contenedor, ubic\xe1ndolo en el directorio /app."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"COPY requirements.txt /app/"}),":\nCopia el archivo requirements.txt (que lista las dependencias de Python) desde tu m\xe1quina al contenedor."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"RUN pip install -r requirements.txt"}),":\nInstala las bibliotecas de Python especificadas en requirements.txt. Esto asegura que todas las dependencias necesarias est\xe9n disponibles en el contenedor."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:'CMD ["python", "app.py"]'}),":\nDefine el comando predeterminado para ejecutar cuando el contenedor se inicie. En este caso, ejecuta app.py usando Python."]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h3,{id:"vamoh-a-probarlo",children:(0,s.jsx)(n.strong,{children:"Vamoh a probarlo"})}),"\n",(0,s.jsx)(n.p,{children:"Primero recuerda tener Docker Desktop en ejecuci\xf3n."}),"\n",(0,s.jsxs)(n.p,{children:["Ahora abre una terminal y navega hasta la carpeta donde est\xe1 el ",(0,s.jsx)(n.code,{children:"Dockerfile"})," que ser\xeda algo as\xed:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"cd docker-tutorial\ncd app1\n"})}),"\n",(0,s.jsx)(n.p,{children:"Ahora construiremos la imagen, en el mismo terminal ejecuta este comando:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"docker build -t chuck_norris_generator -f Dockerfile .\n"})}),"\n",(0,s.jsx)(n.p,{children:"Si todo va bien deber\xedas ver el proceso de creaci\xf3n de la imagen de la app1"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{alt:"app1build",src:a(9566).A+"",width:"1178",height:"860"})}),"\n",(0,s.jsx)(n.p,{children:"Ahora haremos correr a ese container! Copia y pega las siguientes instrucciones en tu terminal:"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Para macOS"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:'docker run -it \\\n  --name chuck_norris_generator \\\n  -e API_URL=https://api.chucknorris.io/jokes/random \\\n  -v "$(pwd)/../data:/app/data" \\\n  chuck_norris_generator\n'})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Para Windows (PowerShell)"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"docker run -it `\n  --name chuck_norris_generator `\n  -e API_URL=https://api.chucknorris.io/jokes/random `\n  -v ${PWD}/../data:/app/data `\n  chuck_norris_generator\n"})}),"\n",(0,s.jsx)(n.p,{children:"Si todo va bien, deber\xedas ver los logs de tu contenedor en la terminal y al abrir el jokes.txt deber\xeda estar el primer chiste de don Chuck."}),"\n",(0,s.jsx)(n.h2,{id:"runconainer",children:(0,s.jsx)(n.img,{alt:"runconainer",src:a(4313).A+"",width:"2096",height:"542"})}),"\n",(0,s.jsx)(n.h3,{id:"qu\xe9-hicimos-con-este-comando",children:(0,s.jsx)(n.strong,{children:"Qu\xe9 hicimos con este comando"})}),"\n",(0,s.jsx)(n.p,{children:"\xa1Vamos a desmenuzar este comando para entenderlo paso a paso! Aqu\xed estamos ejecutando un contenedor de Docker que genera bromas de don Chuck Norris, le asignamos un nombre, le pasamos una variable de entorno para configurar la API y conectamos un volumen para guardar las bromas."}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h3,{id:"explicaci\xf3n-del-comando",children:(0,s.jsx)(n.strong,{children:"Explicaci\xf3n del comando"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-powershell",children:"docker run -it `\n  --name chuck_norris_generator `\n  -e API_URL=https://api.chucknorris.io/jokes/random `\n  -v ${PWD}/../data:/app/data `\n  chuck_norris_generator\n"})}),"\n",(0,s.jsx)(n.h4,{id:"1-docker-run",children:(0,s.jsxs)(n.strong,{children:["1. ",(0,s.jsx)(n.code,{children:"docker run"})]})}),"\n",(0,s.jsxs)(n.p,{children:["Esto le dice a Docker que queremos ejecutar un contenedor basado en una imagen (en este caso, ",(0,s.jsx)(n.code,{children:"app1"}),")."]}),"\n",(0,s.jsx)(n.h4,{id:"2--it",children:(0,s.jsxs)(n.strong,{children:["2. ",(0,s.jsx)(n.code,{children:"-it"})]})}),"\n",(0,s.jsx)(n.p,{children:'Esto significa que el contenedor se ejecutar\xe1 de manera interactiva y mostrar\xe1 la salida directamente en nuestra terminal. B\xe1sicamente, estamos "entrando" al contenedor.'}),"\n",(0,s.jsx)(n.h4,{id:"3---name-chuck_norris_generator",children:(0,s.jsxs)(n.strong,{children:["3. ",(0,s.jsx)(n.code,{children:"--name chuck_norris_generator"})]})}),"\n",(0,s.jsxs)(n.p,{children:["Aqu\xed le damos un nombre al contenedor: ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"chuck_norris_generator"})}),". Esto es \xfatil porque en lugar de lidiar con un CONTAINER ID largo generado por Docker, ahora podemos referirnos a este contenedor por su nombre. Por ejemplo, si queremos detenerlo, podemos usar:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"docker stop chuck_norris_generator\n"})}),"\n",(0,s.jsx)(n.h4,{id:"4--e-api_urlhttpsapichucknorrisiojokesrandom",children:(0,s.jsxs)(n.strong,{children:["4. ",(0,s.jsx)(n.code,{children:"-e API_URL=https://api.chucknorris.io/jokes/random"})]})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"\xa1Esta es la clave para personalizar el contenedor!"}),(0,s.jsx)(n.br,{}),"\n","Con ",(0,s.jsx)(n.code,{children:"-e"}),", le pasamos una ",(0,s.jsx)(n.strong,{children:"variable de entorno"})," llamada ",(0,s.jsx)(n.code,{children:"API_URL"}),". Esto le dice al contenedor qu\xe9 API debe usar para obtener las bromas. En este caso, apuntamos a la API de Chuck Norris."]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"\xbfPor qu\xe9 usar una variable de entorno?"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Porque hace que el c\xf3digo sea m\xe1s flexible. Si alguna vez necesitas cambiar la URL de la API, no tendr\xe1s que modificar el c\xf3digo del contenedor. Solo cambias la variable de entorno al ejecutarlo."}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"5--v-pwddataappdata",children:(0,s.jsxs)(n.strong,{children:["5. ",(0,s.jsx)(n.code,{children:"-v ${PWD}/../data:/app/data"})]})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Aqu\xed est\xe1 el truco para guardar datos entre ejecuciones."}),(0,s.jsx)(n.br,{}),"\n","Con ",(0,s.jsx)(n.code,{children:"-v"}),", estamos creando un ",(0,s.jsx)(n.strong,{children:"volumen"}),". En t\xe9rminos simples, esto conecta un directorio de tu m\xe1quina (",(0,s.jsx)(n.code,{children:"${PWD}/../data"}),") con un directorio dentro del contenedor (",(0,s.jsx)(n.code,{children:"/app/data"}),")."]}),"\n",(0,s.jsx)(n.p,{children:"\xbfQu\xe9 significa esto?"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:(0,s.jsxs)(n.strong,{children:[(0,s.jsx)(n.code,{children:"${PWD}/../data"}),":"]})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Este es el directorio en tu m\xe1quina donde se guardar\xe1n las bromas."}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"${PWD}"})," obtiene el directorio actual (en este caso, donde est\xe1s ejecutando el comando), y ",(0,s.jsx)(n.code,{children:"../data"})," sube un nivel para buscar la carpeta ",(0,s.jsx)(n.code,{children:"data"}),"."]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:(0,s.jsxs)(n.strong,{children:[(0,s.jsx)(n.code,{children:"/app/data"}),":"]})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Es el directorio dentro del contenedor donde se escriben las bromas."}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Resultado:"}),(0,s.jsx)(n.br,{}),"\n","Las bromas generadas por el contenedor se guardan en tu m\xe1quina local en ",(0,s.jsx)(n.code,{children:"../data/jokes.txt"}),". Esto significa que si detienes o eliminas el contenedor, \xa1las bromas seguir\xe1n ah\xed! \ud83d\ude02"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"6-app1",children:(0,s.jsxs)(n.strong,{children:["6. ",(0,s.jsx)(n.code,{children:"app1"})]})}),"\n",(0,s.jsx)(n.p,{children:"Por \xfaltimo, este es el nombre de la imagen Docker que queremos ejecutar."}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h3,{id:"qu\xe9-logramos",children:(0,s.jsx)(n.strong,{children:"Qu\xe9 logramos"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsxs)(n.strong,{children:["Usamos una variable de entorno (",(0,s.jsx)(n.code,{children:"API_URL"}),")"]})," para configurar la API desde donde se obtienen las bromas, sin modificar el c\xf3digo del contenedor."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsxs)(n.strong,{children:["Montamos un volumen (",(0,s.jsx)(n.code,{children:"-v"}),")"]})," para que los datos generados por el contenedor (las bromas) se guarden en nuestra m\xe1quina. Esto asegura que las bromas persistan incluso si el contenedor se detiene o elimina."]}),"\n"]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h3,{id:"por-qu\xe9-importa",children:(0,s.jsx)(n.strong,{children:"\xbfPor qu\xe9 Importa?"})}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsxs)(n.strong,{children:["Flexibilidad con ",(0,s.jsx)(n.code,{children:"-e"}),":"]}),(0,s.jsx)(n.br,{}),"\n","Las variables de entorno hacen que el contenedor sea reutilizable en diferentes escenarios. Por ejemplo, puedes usar otra API solo cambiando la URL que pasas a ",(0,s.jsx)(n.code,{children:"API_URL"}),"."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsxs)(n.strong,{children:["Persistencia con ",(0,s.jsx)(n.code,{children:"-v"}),":"]}),(0,s.jsx)(n.br,{}),"\n","Los vol\xfamenes permiten que los datos sobrevivan al ciclo de vida del contenedor. Esto es fundamental para aplicaciones que generan o consumen datos."]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Ahora vamos con la segunda app"}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"app2",children:(0,s.jsx)(n.strong,{children:"app2"})}),"\n",(0,s.jsx)(n.p,{children:"Sigue los pasos que est\xe1n a continuaci\xf3n"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["En la ",(0,s.jsx)(n.strong,{children:"docker-tutorial"})," crea un directorio que se llame ",(0,s.jsx)(n.strong,{children:"app2"}),", abre esta carpeta en tu editor"]}),"\n",(0,s.jsxs)(n.li,{children:["En ",(0,s.jsx)(n.strong,{children:"app2"})," crea la carpeta ",(0,s.jsx)(n.strong,{children:"static"}),", luego ingresa a ella y crea el archivo ",(0,s.jsx)(n.code,{children:"style.css"})]}),"\n",(0,s.jsxs)(n.li,{children:["Ahora te devuelves un nivel y en ",(0,s.jsx)(n.strong,{children:"app2"})," crea el archivo ",(0,s.jsx)(n.code,{children:"app.py"})]}),"\n",(0,s.jsxs)(n.li,{children:["Crea dentro de app2 un archivo txt llamado ",(0,s.jsx)(n.code,{children:"requirements"})]}),"\n",(0,s.jsxs)(n.li,{children:["Crea dentro de app2 una carpeta archivo llamado ",(0,s.jsx)(n.code,{children:"Dockerfile"})]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Tu carpeta docker-tutorial se debe ver as\xed"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"docker-tutorial/\n\u251c\u2500\u2500 app1/               \n\u2502   \u251c\u2500\u2500 app.py\n\u2502   \u251c\u2500\u2500 requirements.txt\n\u2502   \u251c\u2500\u2500 Dockerfile\n|\u2500\u2500 data/\n\u251c\u2500\u2500 app2/               \n\u2502   \u251c\u2500\u2500 app.py\n\u2502   \u251c\u2500\u2500 requirements.txt\n\u2502   \u251c\u2500\u2500 Dockerfile\n\u2502   \u251c\u2500\u2500 static/\n\u2502       \u251c\u2500\u2500 style.css\n"})}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h3,{id:"apppy-1",children:(0,s.jsx)(n.strong,{children:"app.py"})}),"\n",(0,s.jsxs)(n.p,{children:["Sigamos, ahora abre en el ",(0,s.jsx)(n.code,{children:"app.py"})," y copia el c\xf3digo que est\xe1 a continuaci\xf3n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'from flask import Flask, render_template_string\nimport os\nimport requests\n\napp = Flask(__name__)\n\n# Rutas al archivo de bromas\ndata_file = \'/app/data/jokes.txt\'\n\n# URL de la API de Rick and Morty\n\nrick_and_morty_api = os.getenv(\'API_URL\')\n\n@app.route(\'/\')\ndef show_jokes_and_images():\n    # Leer las bromas desde el archivo\n    if os.path.exists(data_file):\n        with open(data_file, \'r\') as file:\n            jokes = file.read().splitlines()\n    else:\n        jokes = ["No hay bromas disponibles a\xfan."]\n\n    # Obtener un personaje aleatorio de Rick and Morty\n    response = requests.get(rick_and_morty_api)\n    if response.status_code == 200:\n        characters = response.json()[\'results\']\n        images = [char[\'image\'] for char in characters]\n    else:\n        images = ["/static/default.jpg"]  # Imagen por defecto si falla la API\n\n    # Combinar bromas con im\xe1genes aleatorias\n    cards = [{"joke": joke, "image": images[i % len(images)]} for i, joke in enumerate(jokes)]\n\n    # Renderizar HTML\n    html = """\n    <!DOCTYPE html>\n    <html>\n    <head>\n        <title>Chuck Norris Jokes</title>\n        <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/css/bootstrap.min.css">\n        <link rel="stylesheet" href="/static/style.css">\n        <script>\n            setInterval(function() {\n                location.reload();\n            }, 60000); // Recargar cada 60 segundos\n        <\/script>\n    </head>\n    <body>\n        <div class="container mt-4">\n            <h1 class="text-center mb-4">Chuck Norris Jokes + Rick and Morty</h1>\n            <div class="row">\n                {% for card in cards %}\n                <div class="col-md-6 mb-3">\n                    <div class="card">\n                        <div class="row g-0">\n                            <div class="col-md-4">\n                                <img src="{{ card.image }}" class="img-fluid rounded-start" alt="Character">\n                            </div>\n                            <div class="col-md-8">\n                                <div class="card-body">\n                                    <p class="card-text">{{ card.joke }}</p>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n                {% endfor %}\n            </div>\n        </div>\n    </body>\n    </html>\n    """\n    return render_template_string(html, cards=cards)\n\nif __name__ == \'__main__\':\n    app.run(host=\'0.0.0.0\', port=5000)\n\n'})}),"\n",(0,s.jsxs)(n.p,{children:["Este c\xf3digo crea una aplicaci\xf3n web con Flask que combina bromas de Chuck Norris con im\xe1genes de personajes de ",(0,s.jsx)(n.strong,{children:"Rick and Morty"}),"."]}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Lee las bromas"})," de un archivo (",(0,s.jsx)(n.code,{children:"jokes.txt"}),"), si no existe, muestra un mensaje por defecto."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Obtiene personajes"})," de Rick and Morty desde una API y extrae sus im\xe1genes. Si la API falla, usa una imagen por defecto."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Combina bromas e im\xe1genes"})," en tarjetas (",(0,s.jsx)(n.code,{children:"cards"}),") usando un dise\xf1o horizontal estilo Bootstrap."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Renderiza un HTML din\xe1mico"})," que muestra las tarjetas, actualizando la p\xe1gina autom\xe1ticamente cada 60 segundos para reflejar cambios en las bromas."]}),"\n"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"En /static/ agrega cualquier imagen que tengas con el nombre default.jpg, de esta forma si falla la API de Rick and Morty se ver\xe1 una imagen en las tarjetas."}),"\n"]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h3,{id:"requirementstxt-1",children:(0,s.jsx)(n.strong,{children:"requirements.txt"})}),"\n",(0,s.jsx)(n.p,{children:"Abre el archivo requirements y dentro copia y pega lo siguiente:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"flask\nrequests\n"})}),"\n",(0,s.jsx)(n.p,{children:"\xa1No olvides guardar!"}),"\n",(0,s.jsx)(n.p,{children:"El requirements.txt contiene las dependencias que se utilizar\xe1n, en este caso requests para crear la aplicaci\xf3n web y requests para las peticiones al API de Ricky and Morty"}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h3,{id:"stylecss",children:(0,s.jsx)(n.strong,{children:"style.css"})}),"\n",(0,s.jsxs)(n.p,{children:["Ingresa a la carpeta ",(0,s.jsx)(n.strong,{children:"static"})," y abre el archivo ",(0,s.jsx)(n.code,{children:"style.css"})," y pega ah\xed las lineas de c\xf3digo que est\xe1n a continuaci\xf3n:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-css",children:"body {\n    font-family: Arial, sans-serif;\n    background-color: #f4f4f4;\n    margin: 0;\n    padding: 0;\n}\n\nh1 {\n    color: #007bff;\n}\n\n.card {\n    border: 1px solid #ddd;\n    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\n    border-radius: 10px;\n    overflow: hidden;\n}\n\n.card img {\n    max-height: 150px;\n    object-fit: cover;\n}\n\n.card-text {\n    font-size: 1rem;\n    line-height: 1.5;\n}\n\n"})}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h3,{id:"dockerfile-1",children:(0,s.jsx)(n.strong,{children:"Dockerfile"})}),"\n",(0,s.jsxs)(n.p,{children:["Ahora abre el archivo ",(0,s.jsx)(n.code,{children:"Dockerfile"})," y pega lo que est\xe1 aqu\xed abajo:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-Dockerfile",children:'# Usa una imagen base ligera de Python 3.9\nFROM python:3.9-slim\n\n# Crea los directorios necesarios dentro del contenedor: \n# - /app para almacenar el c\xf3digo de la aplicaci\xf3n\n# - /app/data para guardar los datos generados por la aplicaci\xf3n (en este caso, bromas)\n\nRUN mkdir /app /app/data\n# Establece el directorio de trabajo dentro del contenedor\nWORKDIR /app\n\n# Copia el archivo de requisitos\nCOPY requirements.txt /app/\n\n# Instala las dependencias\nRUN pip install -r requirements.txt\n\n# Copia el c\xf3digo de la aplicaci\xf3n al contenedor\nCOPY . /app/\n\n# Expone el puerto 5000 para Flask\nEXPOSE 5000\n\n# Comando predeterminado para ejecutar la aplicaci\xf3n\nCMD ["python", "app.py"]\n'})}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h3,{id:"vamoh-a-probarlo-1",children:(0,s.jsx)(n.strong,{children:"Vamoh a probarlo"})}),"\n",(0,s.jsx)(n.p,{children:"Primero recuerda tener Docker Desktop en ejecuci\xf3n."}),"\n",(0,s.jsxs)(n.p,{children:["Ahora abre una terminal y navega hasta la carpeta donde est\xe1 el ",(0,s.jsx)(n.code,{children:"Dockerfile"})," que ser\xeda algo as\xed:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"cd docker-tutorial\ncd app2\n"})}),"\n",(0,s.jsx)(n.p,{children:"Ahora construiremos la imagen, en el mismo terminal ejecuta este comando:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"docker build -t chuck_norris_web -f Dockerfile .\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Deberias ver algo como lo que est\xe1 en la imagen\n",(0,s.jsx)(n.img,{alt:"dockerapp2 build",src:a(383).A+"",width:"1222",height:"920"})]}),"\n",(0,s.jsx)(n.p,{children:"Ahora haremos correr a ese container! Copia y pega las siguientes instrucciones en tu terminal:"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Para macOS"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:'docker run -it \\\n  --name chuck_norris_web \\\n  -e API_URL=https://rickandmortyapi.com/api/character \\\n  -p 8081:5000 \\\n  -v "$(pwd)/../data:/app/data" \\\n  chuck_norris_web\n'})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Para Windows (PowerShell)"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"docker run -it `\n  --name chuck_norris_web `\n  - e API_URL=https://rickandmortyapi.com/api/character `\n  -p 8081:5000 `\n  -v ${PWD}/../data:/app/data `\n  chuck_norris_web\n"})}),"\n",(0,s.jsx)(n.p,{children:"Si todo va bien, deber\xedas ver algo como esto en la terminal:"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{alt:"run app2",src:a(4578).A+"",width:"1152",height:"742"})}),"\n",(0,s.jsx)(n.p,{children:"Y en el navegador ingresa al localhost:8081 y deber\xedas ver algo como esto:"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{alt:"navegador",src:a(5239).A+"",width:"2096",height:"1648"})}),"\n",(0,s.jsxs)(n.p,{children:["Y listo, la ",(0,s.jsx)(n.strong,{children:"app2"})," esta funcionando \ud83c\udf89\ud83c\udf89 ahora tienes dos aplicaciones contenerizadas que comparten un volumen y utilizan variables de entorno, en este caso consultan a dos APIS distintas. \xbfVez el potencial de los contenedores? No tuviste que instalar ninguna dependencia de python, no tuviste que descargar python, este c\xf3digo nunca lo ejecutaste en tu VS Code, solo se ejecuto en un ambiente aislado con sus propias dependencias, osea en un contenedor.\nLa app1 se trae las frases y la app2 las muestra junto con una imagen en el navegador."]}),"\n",(0,s.jsxs)(n.p,{children:["Te dejo como deber\xeda estar tu estructura de carpetas\n",(0,s.jsx)(n.img,{alt:"estructura",src:a(6045).A+"",width:"664",height:"692"})]})]})}function p(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(t,{...e})}):t(e)}},9566:(e,n,a)=>{a.d(n,{A:()=>r});const r=a.p+"assets/images/buildapp1-2f686527535a09673013443e746fe2aa.png"},383:(e,n,a)=>{a.d(n,{A:()=>r});const r=a.p+"assets/images/docker_app2_build-b226b952d291f1fb868327f70a749680.png"},6045:(e,n,a)=>{a.d(n,{A:()=>r});const r=a.p+"assets/images/estructura-4c433696cbf11d2eb6175dfc76a283d9.png"},5239:(e,n,a)=>{a.d(n,{A:()=>r});const r=a.p+"assets/images/navegador-50fa9600141916e44a45679af6da6763.png"},4313:(e,n,a)=>{a.d(n,{A:()=>r});const r=a.p+"assets/images/runapp1-292e34a97e3751bac568bdeafe6e2cc5.png"},4578:(e,n,a)=>{a.d(n,{A:()=>r});const r=a.p+"assets/images/runapp2-ac5118e40463791bcbfc0fb8a584f7b0.png"},8453:(e,n,a)=>{a.d(n,{R:()=>i,x:()=>d});var r=a(6540);const s={},o=r.createContext(s);function i(e){const n=r.useContext(o);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),r.createElement(o.Provider,{value:n},e.children)}}}]);