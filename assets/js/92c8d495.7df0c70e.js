"use strict";(self.webpackChunklecciones_docker=self.webpackChunklecciones_docker||[]).push([[301],{6365:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>i,contentTitle:()=>d,default:()=>u,frontMatter:()=>s,metadata:()=>r,toc:()=>l});const r=JSON.parse('{"id":"tutorial-docker/contenedor-excalidraw","title":"6. Contenedor de Excalidraw \u270f\ufe0f","description":"My first Excalidraw container","source":"@site/docs/tutorial-docker/contenedor-excalidraw.md","sourceDirName":"tutorial-docker","slug":"/tutorial-docker/contenedor-excalidraw","permalink":"/tuto/docs/tutorial-docker/contenedor-excalidraw","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/tutorial-docker/contenedor-excalidraw.md","tags":[],"version":"current","sidebarPosition":5,"frontMatter":{"sidebar_position":5},"sidebar":"tutorialSidebar","previous":{"title":"5. Los Conceptos B\xe1sicos de los Contenedores \ud83d\udc40","permalink":"/tuto/docs/tutorial-docker/conceptos-basicos"},"next":{"title":"7. Variables de Entorno y Vol\xfamenes","permalink":"/tuto/docs/tutorial-docker/ejemplo2"}}');var c=o(4848),a=o(8453);const s={sidebar_position:5},d="6. Contenedor de Excalidraw \u270f\ufe0f",i={},l=[{value:"My first Excalidraw container",id:"my-first-excalidraw-container",level:2},{value:"Opciones comunes con docker run",id:"opciones-comunes-con-docker-run",level:3},{value:"Ejemplo pr\xe1ctico con Excalidraw",id:"ejemplo-pr\xe1ctico-con-excalidraw",level:3},{value:"Ver logs del contenedor",id:"ver-logs-del-contenedor",level:3},{value:"Pol\xedtica de reinicio",id:"pol\xedtica-de-reinicio",level:3}];function t(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",img:"img",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.R)(),...e.components};return(0,c.jsxs)(c.Fragment,{children:[(0,c.jsx)(n.header,{children:(0,c.jsx)(n.h1,{id:"6-contenedor-de-excalidraw-\ufe0f",children:"6. Contenedor de Excalidraw \u270f\ufe0f"})}),"\n",(0,c.jsx)(n.h2,{id:"my-first-excalidraw-container",children:"My first Excalidraw container"}),"\n",(0,c.jsxs)(n.p,{children:["Para comenzar a utilizar ",(0,c.jsx)(n.strong,{children:"Excalidraw"})," dentro de un contenedor, utilizamos el comando ",(0,c.jsx)(n.code,{children:"docker run"}),". Este comando nos permite arrancar un contenedor a partir de una imagen espec\xedfica. La sintaxis b\xe1sica es:"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-bash",children:"docker run <imagen>\n"})}),"\n",(0,c.jsx)(n.p,{children:"En este caso vamos a usar el siguiente comando en la terminal:"}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-bash",children:"docker run excalidraw/excalidraw\n"})}),"\n",(0,c.jsx)(n.p,{children:"La ejecuci\xf3n del del comando te deber\xeda dejar la terminal tomada y ver\xedas algo como esto"}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)(n.img,{alt:"container excalidraw",src:o(5154).A+"",width:"1328",height:"1408"})}),"\n",(0,c.jsx)(n.p,{children:"Aunque no tengamos la imagen descargada, Docker buscar\xe1 autom\xe1ticamente la imagen en Docker Hub, la descargar\xe1 y arrancar\xe1 el contenedor."}),"\n",(0,c.jsxs)(n.p,{children:["Como ya te mencion\xe9, la ejecuci\xf3n del comando run dej\xf3 tomada la terminal, ahora no puedes utilizarla. Entonces lo que haremos es abrir otra terminal y vamos a consultar los contenedores que est\xe1n en ejecuci\xf3n, con el comando ",(0,c.jsx)(n.code,{children:"docker ps"}),":"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-bash",children:"docker ps\n"})}),"\n",(0,c.jsx)(n.p,{children:"Y deber\xedas ver el contenedor de excalidraw que est\xe1 en ejecuci\xf3n"}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)(n.img,{alt:"docker ps excali",src:o(1467).A+"",width:"1270",height:"310"})}),"\n",(0,c.jsx)(n.p,{children:"La informaci\xf3n que veras sera:"}),"\n",(0,c.jsxs)(n.ul,{children:["\n",(0,c.jsxs)(n.li,{children:["\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.strong,{children:"CONTAINER ID"}),":\nEs un identificador \xfanico generado autom\xe1ticamente para cada contenedor, \xfatil para realizar acciones espec\xedficas sobre \xe9l (como detenerlo o eliminarlo)."]}),"\n"]}),"\n",(0,c.jsxs)(n.li,{children:["\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.strong,{children:"IMAGE"}),":\nMuestra el nombre y la etiqueta (tag) de la imagen que se utiliz\xf3 para crear el contenedor."]}),"\n"]}),"\n",(0,c.jsxs)(n.li,{children:["\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.strong,{children:"COMMAND"}),":\nEl comando que se est\xe1 ejecutando como proceso principal del contenedor (normalmente definido en la imagen o sobreescrito al iniciar el contenedor). Ejemplo: /bin/bash."]}),"\n"]}),"\n",(0,c.jsxs)(n.li,{children:["\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.strong,{children:"CREATED"}),":\nIndica cu\xe1nto tiempo ha pasado desde que el contenedor fue creado. Ejemplo: 3 hours ago."]}),"\n"]}),"\n",(0,c.jsxs)(n.li,{children:["\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.strong,{children:"STATUS"}),":\nEl estado actual del contenedor, que puede ser:"]}),"\n",(0,c.jsx)(n.p,{children:"Up X minutes/hours/days: El contenedor est\xe1 ejecut\xe1ndose.\nExited (code) X minutes ago: El contenedor se detuvo (con un c\xf3digo de salida)."}),"\n"]}),"\n",(0,c.jsxs)(n.li,{children:["\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.strong,{children:"PORTS"}),":\nLista los puertos que est\xe1n expuestos y mapeados en el contenedor."]}),"\n"]}),"\n",(0,c.jsxs)(n.li,{children:["\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.strong,{children:"NAMES"}),":\nEl nombre asignado al contenedor, ya sea generado autom\xe1ticamente o definido por el usuario al crearlo."]}),"\n"]}),"\n"]}),"\n",(0,c.jsx)(n.p,{children:"Si adem\xe1s queremos ver todos los contenedores, tanto los que est\xe1n en ejecuci\xf3n como los que han sido detenidos, utilizamos:"}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-bash",children:"docker ps -a\n"})}),"\n",(0,c.jsx)(n.p,{children:"Ahora vamos a detener el contenedor que se est\xe1 ejecutando, para eso en la terminal colocamos el siguiente comando"}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-bash",children:"docker stop <CONTAINER ID>\n"})}),"\n",(0,c.jsxs)(n.p,{children:["En este caso el ID del contenedor en ejecuci\xf3n es 948ecd7e85a6, por lo que el comando es ",(0,c.jsx)(n.code,{children:"docker stop 948ecd7e85a6"})," o tambi\xe9n, como se muestra en la imagen que est\xe1 a continuaci\xf3n, podemos utilizar solo los primeros 3 caracteres del ID."]}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)(n.img,{alt:"docker stop",src:o(4657).A+"",width:"1258",height:"370"})}),"\n",(0,c.jsxs)(n.p,{children:["Como puedes ver, cuando ejecutamos el comando ",(0,c.jsx)(n.code,{children:"docker ps"})," ya no hay contenedores ejecut\xe1ndose."]}),"\n",(0,c.jsx)(n.h3,{id:"opciones-comunes-con-docker-run",children:"Opciones comunes con docker run"}),"\n",(0,c.jsxs)(n.p,{children:["El comando ",(0,c.jsx)(n.code,{children:"docker run"})," nos permite personalizar el comportamiento de los contenedores mediante diferentes opciones. Algunas de las m\xe1s comunes son:"]}),"\n",(0,c.jsxs)(n.ul,{children:["\n",(0,c.jsxs)(n.li,{children:[(0,c.jsx)(n.code,{children:"-d"}),": Ejecuta el contenedor en segundo plano."]}),"\n",(0,c.jsxs)(n.li,{children:[(0,c.jsx)(n.code,{children:"-p"}),": Mapea un puerto del host a un puerto del contenedor."]}),"\n",(0,c.jsxs)(n.li,{children:[(0,c.jsx)(n.code,{children:"--name"}),": Asigna un nombre personalizado al contenedor."]}),"\n",(0,c.jsxs)(n.li,{children:[(0,c.jsx)(n.code,{children:"--rm"}),": Elimina autom\xe1ticamente el contenedor una vez detenido."]}),"\n",(0,c.jsxs)(n.li,{children:[(0,c.jsx)(n.code,{children:"-v"}),": Mapea un volumen entre el host y el contenedor."]}),"\n",(0,c.jsxs)(n.li,{children:[(0,c.jsx)(n.code,{children:"-e"}),": Define variables de entorno."]}),"\n"]}),"\n",(0,c.jsx)(n.h3,{id:"ejemplo-pr\xe1ctico-con-excalidraw",children:"Ejemplo pr\xe1ctico con Excalidraw"}),"\n",(0,c.jsx)(n.p,{children:"Si queremos ejecutar Excalidraw en segundo plano y mapear un puerto para acceder a \xe9l desde el navegador, podemos hacerlo con:"}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-bash",children:"docker run -d -p 3001:80 --name excalidraw-container excalidraw/excalidraw\n"})}),"\n",(0,c.jsxs)(n.ul,{children:["\n",(0,c.jsxs)(n.li,{children:[(0,c.jsx)(n.code,{children:"-d"}),": Ejecuta el contenedor en segundo plano."]}),"\n",(0,c.jsxs)(n.li,{children:[(0,c.jsx)(n.code,{children:"-p 3001:80"}),": Mapea el puerto 80 del contenedor al puerto 3001 del host, permitiendo acceder a la aplicaci\xf3n en ",(0,c.jsx)(n.a,{href:"http://localhost:3001",children:"http://localhost:3001"}),"."]}),"\n",(0,c.jsxs)(n.li,{children:[(0,c.jsx)(n.code,{children:"--name excalidraw-container"}),': Asigna el nombre "excalidraw-container" al contenedor.']}),"\n"]}),"\n",(0,c.jsx)(n.p,{children:"Con este comando, tendremos Excalidraw ejecut\xe1ndose en un contenedor y accesible desde el navegador."}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)(n.img,{alt:"excali interfaz",src:o(3596).A+"",width:"1452",height:"1646"})}),"\n",(0,c.jsxs)(n.p,{children:["Con un ",(0,c.jsx)(n.code,{children:"docker ps"}),"podemos ver que el contenedor se est\xe1 ejecutando y est\xe1 mapeando el puerto 3001 de nuestra m\xe1quina al 80 del contenedor."]}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)(n.img,{alt:"excali ps interfaz",src:o(1328).A+"",width:"1262",height:"374"})}),"\n",(0,c.jsx)(n.h3,{id:"ver-logs-del-contenedor",children:"Ver logs del contenedor"}),"\n",(0,c.jsx)(n.p,{children:"Como el contenedor est\xe1 en ejecuci\xf3n en segundo plano, podemos consultar sus logs para ver informaci\xf3n sobre lo que est\xe1 ocurriendo dentro del contenedor:"}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-bash",children:"docker logs excalidraw-container\n"})}),"\n",(0,c.jsx)(n.p,{children:"O tambi\xe9n"}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-bash",children:"docker logs <CONTAINER ID>\n"})}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)(n.img,{alt:"docker logs",src:o(3970).A+"",width:"1268",height:"1060"})}),"\n",(0,c.jsx)(n.p,{children:"Si queremos seguir los logs en tiempo real:"}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-bash",children:"docker logs -f excalidraw-container\n"})}),"\n",(0,c.jsx)(n.p,{children:"Para desacoplarnos sin detener el contenedor, usamos la combinaci\xf3n de teclas Control + P + Q."}),"\n",(0,c.jsx)(n.h3,{id:"pol\xedtica-de-reinicio",children:"Pol\xedtica de reinicio"}),"\n",(0,c.jsxs)(n.p,{children:["Si deseamos que el contenedor de Excalidraw se reinicie autom\xe1ticamente en caso de fallo, podemos usar la opci\xf3n ",(0,c.jsx)(n.code,{children:"--restart"}),". Por ejemplo, para reiniciarlo siempre que sea necesario:"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-bash",children:"docker run --restart always -d -p 3001:80 excalidraw/excalidraw\n"})})]})}function u(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,c.jsx)(n,{...e,children:(0,c.jsx)(t,{...e})}):t(e)}},3970:(e,n,o)=>{o.d(n,{A:()=>r});const r=o.p+"assets/images/docker_logs-c5d3bb066b6e9beb5b6041195864f88d.png"},1467:(e,n,o)=>{o.d(n,{A:()=>r});const r=o.p+"assets/images/docker_ps_excali-8e318222d3182778297bfbadf22e254c.png"},1328:(e,n,o)=>{o.d(n,{A:()=>r});const r=o.p+"assets/images/docker_ps_interfaz-f7c6511ce8b70f004c7663435e3ef18d.png"},3596:(e,n,o)=>{o.d(n,{A:()=>r});const r=o.p+"assets/images/excali_interfaz-de6ff6c7984ff982a256099a0fe01148.png"},4657:(e,n,o)=>{o.d(n,{A:()=>r});const r=o.p+"assets/images/excali_stop-57a445c1032a37367acd3e08f3e381ad.png"},5154:(e,n,o)=>{o.d(n,{A:()=>r});const r=o.p+"assets/images/excalidraw_container-ace7f2ebdce4d5f07d595a20f2294567.png"},8453:(e,n,o)=>{o.d(n,{R:()=>s,x:()=>d});var r=o(6540);const c={},a=r.createContext(c);function s(e){const n=r.useContext(a);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(c):e.components||c:s(e.components),r.createElement(a.Provider,{value:n},e.children)}}}]);