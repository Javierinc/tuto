"use strict";(self.webpackChunklecciones_docker=self.webpackChunklecciones_docker||[]).push([[771],{571:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>t,contentTitle:()=>i,default:()=>u,frontMatter:()=>c,metadata:()=>s,toc:()=>l});const s=JSON.parse('{"id":"tutorial-docker/conceptos-basicos","title":"5. Los Conceptos B\xe1sicos de los Contenedores \ud83d\udc40","description":"Conceptos b\xe1sicos de Docker","source":"@site/docs/tutorial-docker/conceptos-basicos.md","sourceDirName":"tutorial-docker","slug":"/tutorial-docker/conceptos-basicos","permalink":"/tuto/docs/tutorial-docker/conceptos-basicos","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/tutorial-docker/conceptos-basicos.md","tags":[],"version":"current","sidebarPosition":4,"frontMatter":{"sidebar_position":4},"sidebar":"tutorialSidebar","previous":{"title":"4. Mi primer Containerrr \ud83c\udfa4","permalink":"/tuto/docs/tutorial-docker/mi-primer-contenedor"},"next":{"title":"6. Contenedor de Excalidraw \u270f\ufe0f","permalink":"/tuto/docs/tutorial-docker/contenedor-excalidraw"}}');var a=o(4848),r=o(8453);const c={sidebar_position:4},i="5. Los Conceptos B\xe1sicos de los Contenedores \ud83d\udc40",t={},l=[{value:"Conceptos b\xe1sicos de Docker",id:"conceptos-b\xe1sicos-de-docker",level:2},{value:"Contenedor",id:"contenedor",level:3},{value:"Imagen",id:"imagen",level:3},{value:"Dockerfile",id:"dockerfile",level:3},{value:"Docker Hub",id:"docker-hub",level:3}];function d(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.header,{children:(0,a.jsx)(n.h1,{id:"5-los-conceptos-b\xe1sicos-de-los-contenedores-",children:"5. Los Conceptos B\xe1sicos de los Contenedores \ud83d\udc40"})}),"\n",(0,a.jsx)(n.h2,{id:"conceptos-b\xe1sicos-de-docker",children:"Conceptos b\xe1sicos de Docker"}),"\n",(0,a.jsx)(n.p,{children:"Para entender c\xf3mo funciona Docker y aprovechar sus capacidades, es importante familiarizarse con algunos conceptos clave. A continuaci\xf3n, explicaremos los elementos esenciales que componen esta tecnolog\xeda."}),"\n",(0,a.jsx)(n.h3,{id:"contenedor",children:"Contenedor"}),"\n",(0,a.jsx)(n.p,{children:"Un contenedor es una instancia en ejecuci\xf3n de una imagen. Es como una c\xe1psula autosuficiente dise\xf1ada para ejecutar una aplicaci\xf3n de manera predecible y uniforme, sin importar el entorno donde se encuentre. Siguiendo con la analog\xeda del traje espacial \ud83d\udc69\u200d\ud83d\ude80, el contenedor encapsula la aplicaci\xf3n junto con todas sus dependencias en un entorno aislado."}),"\n",(0,a.jsx)(n.p,{children:"En t\xe9rminos t\xe9cnicos, un contenedor es un proceso que se ejecuta en este entorno aislado. Los contenedores tienen un comando principal que los controla, definido mediante las instrucciones CMD o ENTRYPOINT en el Dockerfile. Esto significa que un contenedor puede:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Ejecutar una tarea espec\xedfica y finalizar, como procesar un archivo o ejecutar un script."}),"\n",(0,a.jsx)(n.li,{children:"Mantenerse en ejecuci\xf3n indefinidamente, por ejemplo, para ejecutar un servidor web."}),"\n"]}),"\n",(0,a.jsxs)(n.p,{children:["Es importante destacar que los contenedores no son permanentes. Si un contenedor se elimina, ",(0,a.jsx)(n.strong,{children:"la imagen de la cual fue creado permanece intacta"}),", lo que permite iniciar otro contenedor id\xe9ntico en cualquier momento."]}),"\n",(0,a.jsx)(n.h3,{id:"imagen",children:"Imagen"}),"\n",(0,a.jsx)(n.p,{children:"Una imagen es como el plano o la receta de un contenedor. Es un archivo inmutable que contiene todo lo necesario para ejecutar una aplicaci\xf3n: desde el sistema de archivos hasta las configuraciones necesarias."}),"\n",(0,a.jsxs)(n.p,{children:["Las im\xe1genes se crean a partir de un ",(0,a.jsx)(n.strong,{children:"Dockerfile"}),", que act\xfaa como una plantilla para construirlas. Este archivo define:"]}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"La aplicaci\xf3n que se desea ejecutar."}),"\n",(0,a.jsx)(n.li,{children:"Las librer\xedas del lenguaje necesarias para su funcionamiento (como Python, Node.js o Java)."}),"\n",(0,a.jsx)(n.li,{children:"Las librer\xedas del sistema operativo requeridas."}),"\n",(0,a.jsx)(n.li,{children:"Configuraciones espec\xedficas, como los comandos de arranque (CMD o ENTRYPOINT), puertos que se deben exponer y directorios de trabajo."}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:"Una vez construida la imagen, esta puede ser reutilizada para crear m\xfaltiples contenedores, lo que garantiza consistencia en los entornos de desarrollo, pruebas y producci\xf3n."}),"\n",(0,a.jsx)(n.h3,{id:"dockerfile",children:"Dockerfile"}),"\n",(0,a.jsxs)(n.p,{children:["El ",(0,a.jsx)(n.code,{children:"Dockerfile"})," es un archivo que act\xfaa como una receta para construir im\xe1genes en Docker. Contiene un conjunto de instrucciones secuenciales que le indican a Docker c\xf3mo preparar un entorno, desde instalar dependencias hasta copiar archivos o configurar variables de entorno."]}),"\n",(0,a.jsx)(n.p,{children:"Es una herramienta poderosa porque permite codificar todo el proceso de configuraci\xf3n del entorno como texto, asegurando que pueda ser replicado f\xe1cilmente en cualquier momento y en cualquier lugar."}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Estructura b\xe1sica de un Dockerfile"})}),"\n",(0,a.jsxs)(n.p,{children:["Los ",(0,a.jsx)(n.strong,{children:"Dockerfile"})," suelen comenzar con una instrucci\xf3n ",(0,a.jsx)(n.code,{children:"FROM"}),", que define la imagen base que se utilizar\xe1. A partir de ah\xed, se agregan las instrucciones necesarias para personalizar esa imagen base seg\xfan las necesidades de la aplicaci\xf3n. Entre las instrucciones m\xe1s comunes se encuentran:"]}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"RUN"}),": Ejecuta comandos para instalar dependencias o realizar configuraciones."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"COPY"})," o ",(0,a.jsx)(n.code,{children:"ADD"}),": Copian archivos desde el host al contenedor."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"ENV"}),": Define variables de entorno."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"CMD"})," o ",(0,a.jsx)(n.code,{children:"ENTRYPOINT"}),": Especifican el comando que se ejecutar\xe1 al iniciar el contenedor."]}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Ejemplo pr\xe1ctico"})}),"\n",(0,a.jsx)(n.p,{children:"Supongamos que queremos construir una imagen que sirva una p\xe1gina web con un servidor Apache. Este ser\xeda el Dockerfile correspondiente:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-dockerfile",children:'# Usamos Ubuntu 22.04 como base\nFROM ubuntu:22.04  \n\n# Actualizamos paquetes e instalamos Apache\nRUN apt-get update && apt-get install -y apache2  \n\n# Copiamos el archivo de nuestra web est\xe1tica al directorio de Apache\nCOPY index.html /var/www/html/  \n\n# Arrancamos el servidor Apache en primer plano\nCMD ["apache2ctl", "-D", "FOREGROUND"]\n'})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Desglose del ejemplo"})}),"\n",(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"FROM ubuntu:22.04"}),"\nDefine que la imagen base ser\xe1 Ubuntu 22.04. Esta es la base sobre la que construiremos todo lo dem\xe1s."]}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"RUN apt-get update && apt-get install -y apache2"}),"\nActualizamos los paquetes de la distribuci\xf3n e instalamos Apache con sus dependencias. Este comando equivale a escribir estas instrucciones en un terminal de Ubuntu."]}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"COPY index.html /var/www/html/"}),"\nCopiamos un archivo local llamado index.html al directorio donde Apache sirve los archivos web."]}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:'CMD ["apache2ctl", "-D", "FOREGROUND"]'}),"\nDefinimos el comando que se ejecutar\xe1 cuando el contenedor arranque: iniciar el servidor Apache en modo primer plano (FOREGROUND)."]}),"\n"]}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Ventajas del Dockerfile"})}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Replicabilidad: Todo el proceso est\xe1 codificado, lo que asegura que cualquiera pueda generar la misma imagen siguiendo el mismo Dockerfile."}),"\n",(0,a.jsx)(n.li,{children:"Portabilidad: Puedes construir la misma imagen en cualquier sistema que soporte Docker."}),"\n",(0,a.jsx)(n.li,{children:"Automatizaci\xf3n: Permite automatizar la configuraci\xf3n de entornos, reduciendo errores humanos."}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:"En resumen, un Dockerfile es como escribir los pasos que seguir\xedamos manualmente en un sistema operativo, pero los documentamos como c\xf3digo para que puedan ser ejecutados autom\xe1ticamente por Docker. Esto no solo facilita el trabajo en equipo, sino que tambi\xe9n garantiza entornos consistentes. \ud83d\ude80"}),"\n",(0,a.jsx)(n.h3,{id:"docker-hub",children:"Docker Hub"}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Docker Hub"})," es como el ",(0,a.jsx)(n.strong,{children:"mercado central de Docker"}),", donde se almacenan y comparten im\xe1genes de contenedores. Es un repositorio en l\xednea donde puedes encontrar im\xe1genes oficiales creadas por empresas como Python, Nginx o PostgreSQL, adem\xe1s de im\xe1genes comunitarias para m\xfaltiples prop\xf3sitos.\nSi necesitas una base para tus proyectos, como un contenedor con Node.js o una base de datos MySQL, Docker Hub ser\xe1 tu mejor aliado. Tambi\xe9n puedes subir tus propias im\xe1genes para compartirlas con tu equipo o con la comunidad. Solo necesitas una cuenta para empezar a usar este recurso."]}),"\n",(0,a.jsx)(n.p,{children:"Ahora que conoces qu\xe9 son los contenedores, im\xe1genes, Dockerfile y Docker Hub, puedes entender c\xf3mo estos elementos trabajan juntos para construir entornos de desarrollo eficientes, portables y escalables. \ud83d\ude80"})]})}function u(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}},8453:(e,n,o)=>{o.d(n,{R:()=>c,x:()=>i});var s=o(6540);const a={},r=s.createContext(a);function c(e){const n=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:c(e.components),s.createElement(r.Provider,{value:n},e.children)}}}]);